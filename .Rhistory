runApp('C:/Users/Eric/Downloads/hw4-111971030')
runApp('C:/Users/Eric/Downloads/hw4-111971030')
runApp('C:/Users/Eric/Downloads/hw4-111971030')
runApp('C:/Users/Eric/Downloads/hw4-111971030')
runApp('C:/Users/Eric/Downloads/hw4-111971030')
runApp('C:/Users/Eric/Downloads/hw4-111971030')
runApp('C:/Users/Eric/Downloads/hw4-111971030')
runApp('C:/Users/Eric/Downloads/hw4-111971030')
runApp('C:/Users/Eric/Downloads/hw4-111971030')
runApp('C:/Users/Eric/Downloads/hw4-111971030')
runApp('C:/Users/Eric/Downloads/hw4-111971030')
runApp('C:/Users/Eric/Downloads/hw4-111971030')
runApp('C:/Users/Eric/Downloads/hw4-111971030')
runApp('C:/Users/Eric/Downloads/hw4-111971030')
runApp('C:/Users/Eric/Downloads/hw4-111971030')
runApp('C:/Users/Eric/Downloads/hw4-111971030')
runApp('C:/Users/Eric/Downloads/hw4-111971030')
runApp('C:/Users/Eric/Downloads/hw4-111971030')
runApp('C:/Users/Eric/Downloads/hw4-111971030')
runApp('C:/Users/Eric/Downloads/hw4-111971030')
data(iris)
# log transform
log.ir <- log(iris[, 1:4])
ir.species <- iris[, 5]
# apply PCA - scale. = TRUE is highly advisable, but default is FALSE.
ir.pca <- prcomp(log.ir,center = TRUE, scale. = TRUE)
library(ggbiplot)
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1, groups = ir.species)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal', legend.position = 'top')
print(g)
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1, groups = ir.species)
g <- g + scale_color_discrete(name = '')
#g <- g + theme(legend.direction = 'horizontal', legend.position = 'top')
print(g)
library(ggbiplot)
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1, groups = ir.species)
#g <- g + scale_color_discrete(name = '')
#g <- g + theme(legend.direction = 'horizontal', legend.position = 'top')
print(g)
data(iris)
# log transform
log.ir <- log(iris[, 1:4])
ir.species <- iris[, 5]
# apply PCA - scale. = TRUE is highly advisable, but default is FALSE.
ir.pca <- prcomp(log.ir,center = TRUE, scale. = TRUE)
library(ggbiplot)
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1, groups = ir.species)
#g <- g + scale_color_discrete(name = '')
#g <- g + theme(legend.direction = 'horizontal', legend.position = 'top')
print(g)
scale_color_discrete(name = '')
theme(legend.direction = 'horizontal', legend.position = 'top')
source("C:/Users/Eric/Downloads/hw4-111971030/pca.R")
runApp('C:/Users/Eric/Downloads/hw4-111971030')
runApp('C:/Users/Eric/Downloads/hw4-111971030')
runApp('C:/Users/Eric/Downloads/hw4-111971030')
runApp('C:/Users/Eric/Downloads/hw4-111971030')
(colnames(iris[, 2]))
(colnames(iris[, 1]))
(iris[, 1])
(iris[1])
(colnames(iris[1]))
(colnames(iris[2]))
(colnames(iris[, 1:4]))
runApp('C:/Users/Eric/Downloads/hw4-111971030')
runApp('C:/Users/Eric/Downloads/hw4-111971030')
(colnames(iris)[1])
runApp('C:/Users/Eric/Downloads/hw4-111971030')
source("~/.active-rstudio-document")
runApp('C:/Users/Eric/Downloads/hw4-111971030/ca.R')
runApp('C:/Users/Eric/Downloads/hw4-111971030/ca.R')
runApp('C:/Users/Eric/Downloads/hw4-111971030/ca.R')
runApp('C:/Users/Eric/Downloads/hw4-111971030/ca.R')
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
library(FactoMineR)
library(factoextra)
# 讀取 iris 資料集並選取需要的欄位
data(iris)
iris_ca <- iris[, c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width", "Species")]
# 轉換成因子變數，並做 Correspondence analysis
iris_ca <- data.frame(lapply(iris_ca, as.factor))
res.ca <- CA(iris_ca)
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
res.ca <- CA(iris_ca[, -ncol(iris_ca)], quali.sup = ncol(iris_ca),  graph = FALSE)
res.ca <- CA(iris_ca[, -ncol(iris_ca)], quali.sup = ncol(iris_ca),  graph = FALSE)
res.ca <- CA(iris_ca[, -ncol(iris_ca)], quali.sup = ncol(iris_ca),  graph = FALSE)
res.ca <- CA(iris_ca[, -ncol(iris_ca)], quali.sup = ncol(iris_ca),  graph = FALSE)
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
runApp('C:/Users/Eric/Downloads/hw4-111971030')
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
# Load data
data(iris)
head(iris, 3)
# log transform
log.ir <- log(iris[, 1:4])
ir.species <- iris[, 5]
# apply PCA - scale. = TRUE is highly advisable, but default is FALSE.
ir.pca <- prcomp(log.ir,center = TRUE, scale. = TRUE)
print(ir.pca)
# summary method
summary(ir.pca)
# plot method
plot(ir.pca, type = "l")
library(ggbiplot)
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1, groups = ir.species)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal', legend.position = 'top')
print(g)
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1, groups = ir.species, ellipse = TRUE, circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',legend.position = 'top')
print(g)
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1,
groups = ir.species, ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
# Predict PCs
predict(ir.pca, newdata=tail(log.ir, 2))
plot(fit, mass = TRUE, contrib = "absolute", map =
"rowgreen", arrows = c(FALSE, TRUE)) # asymmetric map
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
iris_ca <- iris[5]
# 使用 k-means 進行因子分析
set.seed(123)
iris_ca_kmean <- kmeans(iris_ca, centers = 3, nstart = 20)
# 產生 CA 圖表
ca_plot <- ca(iris_ca_kmean$centers, row.w = iris_ca_kmean$size, col.w = rep(1, ncol(iris_ca)), graph = FALSE)
plot(ca_plot)
# 轉換 iris 資料集中 Species 欄位為數值變數，1: setosa, 2: versicolor, 3: virginica
iris$Species <- as.numeric(iris$Species)
iris_ca <- iris[, 1:4]
# 使用 k-means 進行因子分析
set.seed(123)
iris_ca_kmean <- kmeans(iris_ca, centers = 3, nstart = 20)
# 產生 CA 圖表
ca_plot <- ca(iris_ca_kmean$centers, row.w = iris_ca_kmean$size, col.w = rep(1, ncol(iris_ca)), graph = FALSE)
plot(ca_plot)
# iris_ca_kmean <- kmeans(iris_ca, centers = 3, nstart = 20)
iris_ca_kmean <- kmeans(iris[, 1:4], centers = 5)
# 產生 CA 圖表
ca_plot <- ca(iris_ca_kmean$centers, row.w = iris_ca_kmean$size, col.w = rep(1, ncol(iris_ca)), graph = FALSE)
plot(ca_plot)
# 產生 CA 圖表
ca_plot <- ca(iris_ca_kmean$centers, row.w = iris_ca_kmean$size, col.w = rep(1, ncol(iris_ca)), graph = FALSE)
iris_ca_kmean <- kmeans(iris_ca, centers = 3, nstart = 20)
# 產生 CA 圖表
ca_plot <- ca(iris_ca_kmean$centers, row.w = iris_ca_kmean$size, col.w = rep(1, ncol(iris_ca)), graph = FALSE)
plot(ca_plot)
# 產生 CA 圖表
ca_plot <- ca(iris_ca_kmean$centers, row.w = iris_ca_kmean$size, col.w = rep(1, ncol(iris_ca)), graph = TURE)
plot(ca_plot)
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
data("author")
ca(author)
plot(ca(author))
library(ca)
data(iris)
# 轉換 iris 資料集中 Species 欄位為數值變數，1: setosa, 2: versicolor, 3: virginica
iris$Species <- as.numeric(iris$Species)
iris_ca <- iris[, 1:4]
# 使用 k-means 進行因子分析
set.seed(123)
iris_ca_kmean <- kmeans(iris_ca, centers = 3, nstart = 20)
# 產生 CA 圖表
ca_plot <- ca(iris_ca_kmean$centers, row.w = iris_ca_kmean$size, col.w = rep(1, ncol(iris_ca)), graph = FALSE)
plot(ca_plot,  arrows=c(TRUE, FALSE))
# 產生 CA 圖表
ca_plot <- ca(iris_ca_kmean$centers, row.w = iris_ca_kmean$size, graph = FALSE)
plot(ca_plot,  arrows=c(TRUE, FALSE))
iris_ca_kmean <- kmeans(iris_ca, centers = 3)
# 產生 CA 圖表
ca_plot <- ca(iris_ca_kmean$centers, row.w = iris_ca_kmean$size, graph = FALSE)
plot(ca_plot,  arrows=c(TRUE, FALSE))
ca(iris)
plot(ca(iris))
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
# 使用 k-means 進行因子分析
iris_ca_kmean <- kmeans(iris_ca, center=3, nstart=20)
# 產生 CA 圖表
ca_plot <- ca(iris_ca_kmean$centers, row.w = iris_ca_kmean$size, graph = TRUE )
plot(ca_plot,  arrows=c(TRUE, FALSE))
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
ca(iris)
plot(ca(iris))
data(iris)
iris$Species <- as.numeric(iris$Species)
ca(iris)
plot(ca(iris))
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
data(authors)
data(author)
ca.author.res <- epCA(authors$ca$data)
library(exCA)
data(author)
ca.author.res <- epCA(author$ca$data)
library(epCA)
data(author)
ca.author.res <- epCA(author$ca$data)
library(epCA)
data(author)
ca.author.res <- epCA(author$ca$data)
iris_ca <- iris[, c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width", "Species")]
# 將 iris_ca 轉換成數值矩陣
iris_mat <- as.matrix(iris_ca[, 1:4])
# 將 iris_ca 的 Species 欄位轉換成類別變數
iris_cat <- as.factor(iris_ca[, 5])
# 使用 k-mean 進行 CA 分析
res_ca <- ca.kmeans(iris_mat, k = 3, graph = FALSE)
# 取出 feature 的行列矩陣
feature_coord <- res_ca$colcoord
# 顯示 feature 的行列矩陣
print(feature_coord)
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
print(res.ca$row)
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
install.packages(kmeansCA)
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
install.packages("FactoMineR")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
install.packages(c("FactoMineR", "factoextra"))
data(housetasks)
library("gplots")
#
# # 使用 k-means 進行因子分析
# set.seed(888)
# iris_ca_kmean <- kmeans(iris_ca, center=3, nstart=20)
#
# # 產生 CA 圖表
# ca_plot <- ca(iris_ca_kmean$centers, row.w = iris_ca_kmean$size, graph = TRUE )
# plot(ca_plot,  arrows=c(TRUE, FALSE))
#
#
install.packages(c("FactoMineR", "factoextra","gplots"))
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
res.ca <- CA((iris), graph = FALSE)
print(res.ca)
data(iris)
iris$Species <- as.numeric(iris$Species)
res.ca <- CA((iris), graph = FALSE)
print(res.ca)
fviz_ca_biplot(res.ca, repel = TRUE)
fviz_ca_row(res.ca, repel = TRUE)
fviz_ca_col(res.ca, repel = TRUE)
res.ca <- CA((iris[, 1:4]), graph = FALSE)
print(res.ca)
fviz_ca_col(res.ca, repel = TRUE)
fviz_ca_row(res.ca, repel = TRUE)
iris_ca_kmean <- kmeans(res.ca, center=3, nstart=20)
fviz_ca_row(iris_ca_kmean, repel = TRUE)
iris_ca_kmean <- kmeans(iris[, 1:4], center=3, nstart=20)
fviz_ca_row(iris_ca_kmean, repel = TRUE)
# iris_ca_kmean <- kmeans(iris[, 1:4], center=3, nstart=20)
fviz_ca_row(res.ca, repel = TRUE)
# iris_ca_kmean <- kmeans(iris[, 1:4], center=3, nstart=20)
fviz_ca_row(res.ca, repel = FALSE)
data(iris)
iris$Species <- as.numeric(iris$Species)
set.seed(101)
irisCluster <- kmeans(df[,1:4], center=3, nstart=20)
irisCluster
data(iris)
iris$Species <- as.numeric(iris$Species)
set.seed(101)
irisCluster <- kmeans(iris[,1:4], center=3, nstart=20)
irisCluster
res.ca <- CA(irisCluster, graph = FALSE)
irisCluster <- kmeans(iris[,1:4], center=3, nstart=20)
table(irisCluster$cluster, iris$Species)
library("ggplot2")
data(iris)
iris$Species <- as.numeric(iris$Species)
set.seed(101)
irisCluster <- kmeans(iris[,1:4], center=3, nstart=20)
table(irisCluster$cluster, iris$Species)
res.ca <- CA(irisCluster, graph = FALSE)
source("C:/Users/Eric/Downloads/hw4-111971030/ca.R")
setwd("~/DS2023")
Titanic <- read_csv("/Titanic/train.csv")
if(!require('tidyverse')) {
install.packages('tidyverse')
library('tidyverse')
}
Titanic <- read_csv("/Titanic/train.csv")
Titanic <- read_csv("Titanic/train.csv")
## 資料清理
# 0 確認資料幾列幾欄
dimensions <- dim(Titanic)
num_rows <- dimensions[1]  # 行数
num_cols <- dimensions[2]  # 列数
cat("row:",num_rows,"\n","col:",num_cols,"\n")
# 1. 有無缺失值
# count NA values in each column
sapply(Titanic, function(x) sum(is.na(x)))
# 2. 進行處裡 以及 把不必要欄位 drop 掉
# 目前欄位中， PassengerId、Name、Ticket(票號)，沒有要拿來分析 且 Cabin (房間號嗎) 缺失值過多，因此選擇直接 將此欄刪除。
# Drop the columns
Titanic_train <- subset(Titanic, select = -c(PassengerId, Name, Ticket, Cabin))
# Remove the rows with missing values
Titanic_train <- Titanic_train[complete.cases(Titanic_train[,c("Embarked","Age")]),]
# 2.1 來看一下處理完剩下幾列幾欄(特徵)
dimensions <- dim(Titanic_train)
num_rows <- dimensions[1]  # 行数
num_cols <- dimensions[2]  # 列数
cat("row:",num_rows,"\n","col:",num_cols,"\n")
# 編碼
# 3. 看一下這 8 個欄位(特徵) 資料型態， 因為模型裡只能放入數字型資料，所以稍微觀察一下。
str(Titanic_train)
# 3.1 觀察這兩欄，裡頭有哪些值。
unique(Titanic_train[c("Sex")])
# A tibble: 2 × 1
# Sex
# <chr>
# 1 male
# 2 female
Titanic_train$Sex_factors <- as.numeric(factor(Titanic_train$Sex))
unique(Titanic_train[c("Embarked")])
# A tibble: 3 × 1
# Embarked
# <chr>
# 1 S
# 2 C
# 3 Q
Titanic_train$Embarked_factors <- as.numeric(factor(Titanic_train$Embarked))
# ‘Embarked’ 欄位有 [‘S’, ‘C’,‘Q’] - > [3,1,2]
Titanic_train_subset <- subset(Titanic_train, select = -c(Sex, Embarked))
str(Titanic_train_subset)
# 資料標準化(standardization)
# 因為在資料中，不同資料欄位與資料值所組成，他們分佈狀況可能都不盡相同，因此，就必須將特徵資料按比例縮放，讓資料落在某一特定的區間。
Titanic_train_subset_scale <- Titanic_train_subset
Titanic_train_subset_scale[2 : 8] <- as.data.frame(scale(Titanic_train_subset_scale[2 : 8]))
head(Titanic_train_subset_scale)
#固定random資料
set.seed(1)
# 將現有資料 切分 80 % 作為訓練資料集 10 % 為 測試資料集 10 % 為 驗證資料集
spec = c(train = .8, test = .1, validate = .1)
Titanic_train_sample = sample(cut(
seq(nrow(Titanic_train_subset_scale)),
nrow(Titanic_train_subset_scale)*cumsum(c(0,spec)),
labels = names(spec)
))
res = split(Titanic_train_subset_scale, Titanic_train_sample)
# Use GaussianNB
if (!require('e1071')) {
install.packages('e1071')
library('e1071')
}
model <- naiveBayes(Survived ~ ., data = res$train)
# Use GaussianNB
if (!require('e1071')) {
install.packages('e1071')
library('e1071')
}
model <- naiveBayes(Survived ~ ., data = res$train)
# training accuracy
ga_pred_train <- predict(model, newdata = res$train)
ga_accuracy_train <- mean(ga_pred_train == res$train$Survived)
cat("GaussianNB Training accuracy:", ga_accuracy_train, "\n")
# test accuracy
ga_pred_test <- predict(model, newdata = res$test)
ga_accuracy_test <- mean(ga_pred_test == res$test$Survived)
cat("GaussianNB Test Accuracy:", ga_accuracy_test, "\n")
# confusion matrix
ga_dt_confusion_matrix <- table(Actual = res$test$Survived, Predicted = ga_pred_test)
cat("GaussianNB Confusion Matrix:\n")
print(ga_dt_confusion_matrix)
# Use Dicision Tree
library(rpart)
model <- rpart(Survived ~., data = res$train, method = "class")
# training accuracy
dt_pred_train <- predict(model, res$train, type = "class")
df_accuracy_train <- mean(dt_pred_train == res$train$Survived)
cat("Dicision Tree Training accuracy:", df_accuracy_train, "\n")
# test accuracy
dt_pred_test <- predict(model, res$test, type = "class")
dt_accuracy_test <- mean(dt_pred_test == res$test$Survived)
cat("Dicision Tree Test Accuracy:", dt_accuracy_test, "\n")
# confusion matrix
dt_confusion_matrix <- table(Actual = res$test$Survived, Predicted = dt_pred_test)
cat("Dicision Tree Confusion Matrix:\n")
print(dt_confusion_matrix)
# Use the RandomForestClassifier
library(randomForest)
# Use the RandomForestClassifier
library(randomForest)
rf_mod <- randomForest(factor(Survived) ~ ., data = res$train, ntree = 500)
# training accuracy
rf_pred_train <- predict(rf_mod, newdata = res$train)
rf_accuracy_train <- mean(rf_pred_train == res$train$Survived)
cat("Random Forest Training Accuracy:", rf_accuracy_train, "\n")
# test accuracy
rf_pred_test <- predict(rf_mod, newdata = res$test)
rf_accuracy_test <- mean(rf_pred_test == res$test$Survived)
cat("Random Forest Test Accuracy:", rf_accuracy_test, "\n")
# confusion matrix
rf_confusion_matrix <- table(Actual = res$test$Survived, Predicted = rf_pred_test)
cat("Random Forest Confusion Matrix:\n")
print(rf_confusion_matrix)
